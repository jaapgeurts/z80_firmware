
  include "consts.inc"

  global initDisplay
  global putDisplayChar
  global printd
  global displayClearBuffer
  global displayClearScreen
  global displayClear


; *********************
; *** DPY REGISTERS ***
; *********************

  section .consts

ILI_REG_SLPOUT   equ 0x11
ILI_REG_NORON    equ 0x13
ILI_REG_DISOFF   equ 0x28 
ILI_REG_DISON    equ 0x29
ILI_REG_CASET    equ 0x2a
ILI_REG_PASET    equ 0x2b
ILI_REG_RAMWR    equ 0x2c
ILI_REG_VSCRDEF  equ 0x33
ILI_REG_MADCTL   equ 0x36
ILI_REG_VSCRSADD equ 0x37
ILI_REG_COLMOD   equ 0x3a
ILI_REG_WRDISBV  equ 0x51
ILI_REG_WRCTRLD  equ 0x53
ILI_REG_RDID4    equ 0xd3

SCROLL_NUM_LINES equ 1 ; scroll one line at a time
SCROLL_NUM_CHARS equ COLS * SCROLL_NUM_LINES

SCREEN_PTR_MASK_H  equ 0x07 ; high byte for anding: loc -> cursor
SCREEN_BASE_MASK_H equ 0xf0 ; high byte for cursor -> loc  

ILI_MASK_MADCTL_MY  equ 0x80
ILI_MASK_MADCTL_MX  equ 0x40
ILI_MASK_MADCTL_MV  equ 0x20
ILI_MASK_MADCTL_ML  equ 0x10
ILI_MASK_MADCTL_BGR equ 0x08
ILI_MASK_MADCTL_MH  equ 0x04

  section .bss
    ; display
    ; must be at the top so it can be aligned correctly by the linker
    v_screenbuf:  dsb TOTALCHARS ; circular buffer: keep at 0xf000 so we can use a mask on the cursor
    v_cursor:     dsw 1 ; from 0-TOTALCHARS
    v_linestart:  dsb 1 ; the row where the buffer ends
    v_charstart:  dsw 1 ; the character where the buffer ends (= v_linestart * COLS)
    vt_xstart:    dsw 1
    vt_ystart:    dsw 1
    v_foreground: dsw 1
    v_background: dsw 1

    ; temporary vars
    v_tmp:        dsw 1
    v_tmp2:       dsw 1

  section .text

; print char to lcd
; char in A
putDisplayChar: 
  push hl
  push de
  push bc

  ld   de,(v_cursor)
 
  cp   BS
  jr   nz,.checkCR
  ; handle BS - remove previous char
  ; TODO: make sure de != 0
  dec  de
  ld   (v_cursor),de
  jr   .end_nodraw

.checkCR:
  cp   CR
  jr   nz,.checkLF
  ; recalculate the cursor position
  ld   c,COLS
  push de
  ex   de,hl ; put cursor in hl
  call divide ; a = remainder
  or   a ; clear carry flag
  ld   b,0
  ld   c,a
  pop  hl
  sbc  hl,bc
  ld   (v_cursor),hl
  jr   .end_nodraw

.checkLF:
  cp   LF
  jr   nz,.placeChar
  ;   line feed
  ld   hl,COLS
  add  hl,de 
  ex   de,hl
  call checkScrollCursor ; scroll screen if de > 1200
  ld   (v_cursor),de
  jr   .end_nodraw

.placeChar
  ld   h,d ; ld   hl,de
  ld   l,e
  ; add cursor index to screenbuf start
  ld   c,a ; store char
  ld   a,h
  or   SCREEN_BASE_MASK_H
  ld   h,a
  ld   (hl),c ; save char in buffer
  inc  de

  call checkScrollCursor
  
  ld   bc,(v_cursor); v_cursor still has old start location
  ld   (v_cursor),de

  ; update screen
  call displayRepaint ; bc start; de end

.end_nodraw:
  pop  bc
  pop  de
  pop  hl
  ret

; push the string into the buffer; then redraw the screen
; string in hl
printd: 
  push hl
  push bc
  push de

  ld  de,(v_cursor) ; remember start pos
;  ld  (v_tmp),de

  ; add cursor index to screenbuf start
  ld   a,d
  or   SCREEN_BASE_MASK_H
  ld   d,a

  ld   b,(hl) ; load counter
.printd_loop:
  inc  hl
  ld   a, (hl)
  ; check for CR and LF
  cp   CR
  jr   nz, .checkLF
  ; process CR => move cursor to home
  ; get remainder
  push hl ; store the str pointer
  push bc ; store the str index counter
  ld   h,d ; ld hl,de
  ld   l,e ; hl contains the v_cursor
  
  ld   a,h ; convert screen_buf ptr into cursor
  and  SCREEN_PTR_MASK_H
  ld   h,a

  ld   c,COLS
  call divide ; a = remainder
  scf
  ccf ; clear carry flag ; TODO: or a
  ld   b,0
  ld   c,a
  ex   de,hl ; ld hl with v_cursor(de)
  sbc  hl,bc
  ex   de,hl ; ld result back into v_cursor(de)
  pop  bc  ; restore the str index counter
  pop  hl  ; restore the str pointer
  jr   .endif
.checkLF:
  cp   LF
  jr   nz,.storeChar
  ; process linefeed
  push hl ; store the str pointer

  ld   h,d; ld hl,de
  ld   l,e ; hl contains the v_cursor
  ld   a,h ; convert screen_buf ptr into cursor
  and  SCREEN_PTR_MASK_H
  ld   h,a

  ; push bc
  ; add cols to cursor (= LF)
  ld   de,COLS
  add  hl,de
  ex   de,hl  ;push result back into de (screen_buf ptr)

  call checkScrollCursor

  ; restore screenptr
  ld   a,d
  or   SCREEN_BASE_MASK_H
  ld   d,a

  pop  hl ; restore the str pointer
  jr   .endif
.storeChar:
  ld   (de),a
  inc  de
  
  ld   a,d ; convert screen_buf ptr into cursor
  and  SCREEN_PTR_MASK_H
  ld   d,a
  call checkScrollCursor
  ; restore screenptr
  ld   a,d
  or   SCREEN_BASE_MASK_H
  ld   d,a

.endif:
  djnz .printd_loop

  ; subtract screenbuf
  ld   a,d ; convert screen_buf ptr into cursor
  and  SCREEN_PTR_MASK_H
  ld   d,a

  ld   bc,(v_cursor); v_cursor still contains initial start
  ld   (v_cursor),de
  
  ; if both are same, then don't paint
  ; TODO: bugfix for CR
  or   a ; clear carry
  ld   h,b
  ld   l,c
  sbc  hl,de
  jr   z,.skippaint

;  ld   bc,(v_tmp)
;  ld   de,(v_cursor)
  call displayRepaint
.skippaint:
  pop  de
  pop  bc
  pop  hl

  ret

checkScrollCursor:
  push hl
  push bc

  ; if de is over the edge
  ; reset to start
  ld   a,d
  cp   TOTALCHARS >> 8
  jr   nz, .endCheckWrap
  ld   a,e
  cp   TOTALCHARS & 0xff
  jr   nz, .endCheckWrap
  ld   de,0 ; set DE to 0
.endCheckWrap:

  ld  bc,(v_cursor)

 ; check if we've crossed the bounds
  or   a ; clear carry
  ; check if screen is part charstart
  ld   hl, (v_charstart)
  sbc  hl,de
  ; hl contains result
  jr   z,.checkscroll1
  jp   p,.noscroll ; de is before the linestart so no scroll
.checkscroll1:
  ; cursor is after linestart
  or   a ; clear carry
  ld   hl,(v_charstart) ; check if bc is before linestart
  sbc  hl,bc
  jr   z,.checkscroll2
  jp   p, .doscroll ; if before start then must scroll
.checkscroll2
  ; bc was after the start, one more check
  ; check if bc < de
  or   a ; clear carry
  ld   h,d
  ld   l,e
  sbc  hl,bc    
  jp   p,.noscroll

.doscroll:

  call displayDoScroll

.noscroll:
  pop  bc
  pop  hl
  ret 


; scroll display
displayDoScroll:
  push hl
  push bc

; *** SOFTWARE SCROLLING
; When software scrolling is in use we have to repaint all
;  push de
;  ld   bc,0
;  ld   de,TOTALCHARS
;  call displayRepaint
;  pop  de
;**** END SOFTWARE SCROLLING

;*** HARDWARE SCOLLING

  ; clear last line
  ld   b,COLS
  ld   hl,(v_charstart)
  ; restore screenptr
  ld   a,h
  or   SCREEN_BASE_MASK_H
  ld   h,a  
.clearline:
  ld   (hl),0
  inc  hl
  djnz .clearline

  ; repaint cleared line
  ld   bc,(v_charstart)
  push de
  ; wrap de if necessary
  ld   a,(v_linestart)
  cp   ROWS-1
  jr   nz,.addCols
  ld   de,0
  jr   .doClear
.addCols:
  ld   hl,(v_charstart)
  ld   de,COLS
  add  hl,de
  ex   de,hl
.doClear:
  call displayRepaint
  pop  de


  ; increase scroll lines
  ld   bc,COLS
  ld   hl,(v_charstart)
  add  hl,bc
  ld   a,(v_linestart)
  inc  a

  ; if v_linestart == ROWS ; reset to top row
  cp   ROWS
  jr   nz,.doscroll

  ld   a,0 ; reset v_linestart to 0
  ld   hl,0

.doscroll:
  ld   (v_linestart),a
  ld   (v_charstart),hl

  ld   b,FONTH
  ld   c,a
  call multiply

  ld   a,ILI_REG_VSCRSADD
  out  (TFT_C),a
  ld   a, h
  out  (TFT_D),a
  ld   a, l
  out  (TFT_D),a

;*** END HARDWARE SCOLLING

  pop  bc
  pop  hl
  ret

; bc: start, de: end
; end can be before start in case of rollover
; of the circular buffer
displayRepaint:
  push hl
  push bc
  push de

  ; draw from start(bc) to end(de)
  ld   hl,v_screenbuf
  add  hl,de ; save end location
  ld   (v_tmp2),hl

  ; calculate vt_xstart = (start%COLS ) * fontw
  ; calculate vt_ystart = (start/COLS) * fonth
  push bc
  ld   h,b ; ld hl,bc
  ld   l,c
  ld   c,COLS
  call divide ; hl / c = hl rem a
  push hl ; push quotient (y)
  ; calc x
  ld   b,a
  ld   c,FONTW
  call multiply ; result in hl
  ld   (vt_xstart),hl
  ; calc y
  pop  hl
  ld   b,l
  ld   c,FONTH
  call multiply ; result in hl
  ld   (vt_ystart),hl
  
  ; go through the array. if dirty draw

  pop  bc ; restore start
  ld   hl,v_screenbuf
  add  hl,bc
  ld   b,h
  ld   c,l; ld bc,hl: bc contains start location in screenbuf

.startGlyph:

  ; set display start and end position
  push bc
  ld   hl,(vt_xstart)
  push hl ; save start
  ld   bc,FONTW-1
  add  hl,bc
  ex   de,hl ; end in de
  pop  hl ; restore start
  call displaySetX1X2  ; from hl -> de
  ld   hl,(vt_ystart)
  push hl   ; save start
  ld   bc,FONTH-1
  add  hl,bc
  ex   de,hl ; end in de
  pop  hl
  call displaySetY1Y2
  ld   a,ILI_REG_RAMWR    ; do write
  out  (TFT_C),a
  pop  bc

  ld   a,(bc) ; load letter
  
  ; get the glyph
  ld   de,BYTESPERGLYPH  ; font small
  ld   hl,allletters
.findGlyph
  cp   0
  jr   z,.drawGlyph
  add  hl,de
  dec  a
  jr   nz,.findGlyph
  ; hl now points to the correct glyph

.drawGlyph:

  push bc ; contains the index into the screenbuf

  ; pixels to set
  ld   b,BYTESPERGLYPH ; font small
.next_byte:
  ld   a,(hl)
  ld   c, 8
.shift_bit:
  ld   d,a
  ;and  0x80
  bit  7,a
  jr   z,.pix_off
  ld   a,0xff   ; foreground white
  out  (TFT_D),a
;  ld   a,0xff
  out  (TFT_D),a
  jr   .continue
.pix_off 
  ld   a,0xf8  ; background blue TODO: move to var
  out  (TFT_D),a
  ld   a,0x00
  out  (TFT_D),a
.continue: ;
  ld   a,d
  sla  a
  dec  c
  jr   nz,.shift_bit
  inc  hl
  djnz .next_byte

  pop  bc
  
  ; done with the glyph. goto next cell
  inc  bc

  ld   a,b ; convert screen_buf ptr into cursor
  and  SCREEN_PTR_MASK_H
  ld   b,a

  ; if BC == 1200 => BC = 0
  ld   a,b
  cp   TOTALCHARS >> 8
  jr   nz, .checkWrap
  ld   a,c
  cp   TOTALCHARS & 0xff
  jr   nz, .checkWrap
  ld   bc,0 ; set BC to 

.checkWrap:

  ; restore screenptr
  ld   a,b
  or   SCREEN_BASE_MASK_H
  ld   b,a

  ld   de,(v_tmp2) ; if BC == DE quit, else continue
  ld   a,b
  cp   d
  jr   nz,.nextGlyph
  ld   a,c
  cp   e
  jr   nz,.nextGlyph
  ; done drawing
  jr   .printLetEnd

.nextGlyph:

  ld  hl,(vt_xstart)
  ld  de,FONTW
  add hl,de
  ld  a,h
  cp  DPYWIDTH >> 8
  jr  nz, .next1
  ld  a,l
  cp  DPYWIDTH & 0xff  ; one beyond the last column
  jr  nz, .next1
  ; over edge; increase y and set x to zero
  ; increase y
  ld  hl,(vt_ystart)
  ld  de,FONTH
  add hl,de
  ld  (vt_ystart),hl
  ld  hl,0  ;set x-start to zero
.next1:
  ld  (vt_xstart),hl
  jp  .startGlyph

.printLetEnd:
  pop  de
  pop  bc
  pop  hl
  ret

; hl = x1,de = x2
displaySetX1X2:
  ld   a,ILI_REG_CASET   ; set x1,x2
  out  (TFT_C),a
  ld   a,h
  out  (TFT_D),a
  ld   a,l
  out  (TFT_D),a
  ld   a,d
  out  (TFT_D),a
  ld   a,e
  out  (TFT_D),a
  ret
  
; set start y1,y2
; hl = y1,de = y2
displaySetY1Y2:
  ld   a,ILI_REG_PASET   ; set y1,y2
  out  (TFT_C),a
  ld   a,h
  out  (TFT_D),a
  ld   a,l
  out  (TFT_D),a
  ld   a,d
  out  (TFT_D),a
  ld   a,e
  out  (TFT_D),a
  ret

displayClear:
  push bc
  call displayClearBuffer
  call displayClearScreen
  ld   bc,0
  ld   (v_cursor),bc
  ld   (v_charstart),bc
  ld   a,0
  ld   (v_linestart),a

  ld   a,ILI_REG_VSCRSADD
  out  (TFT_C),a
  ld   a, 0
  out  (TFT_D),a
  out  (TFT_D),a

  pop  bc
  ret


displayClearBuffer:
  push hl
  push bc
 ; first clear backing store
  ld   hl,v_screenbuf
  ld   bc,TOTALCHARS
.nextclear:
  ld   (hl),0
  inc  hl
  dec  bc
  ld   a,b
  or   c
  jr   nz,.nextclear
  pop  bc
  pop  hl
  ret

displayClearScreen:
  push bc
  push de
  push hl

  ld   hl,0
  ld   de,DPYWIDTH
  call displaySetX1X2
  ld   hl,0
  ld   de,DPYHEIGHT
  call displaySetY1Y2
  ld   a,ILI_REG_RAMWR    ; do write
  out  (TFT_C),a
; loop 480x320 times = 3 * 200 * 256
  ld   d,3
  ld   bc,200
.dpyClearLoop:
  ld   a,0xf8  ; background blue TODO: move to var
  out  (TFT_D),a
  ld   a,0x00
  out  (TFT_D),a
  djnz .dpyClearLoop
  dec  c
  ld   b,0  ; dnjz decreases first then compares so is actually 256
  jr   nz,.dpyClearLoop
  dec  d
  ld   c,200
  jr   nz,.dpyClearLoop
  pop  hl
  pop  de
  pop  bc
  ret

initDisplay:
  push bc

  ld   bc,0
  ld   (v_cursor),bc
  ld   (v_charstart),bc

  ld   a,0
  ld   (v_linestart),a


  ld   a,0x01   ; reset TFT display
  out  (TFT_C),a

  ld   b,0xff
delay1:
  djnz  delay1

 ; TODO: print what has been detected
;  ld   a,ILI_REG_RDID4  ; read id
;  out  (TFT_C),a
;  in   a,(TFT_D); dummy data
;  in   a,(TFT_D) ; not relevant
;  in   a,(TFT_D)
;  call printhex
;  in   a,(TFT_D)
;  call printhex

; TODO: reduce by writing a loop and sending data from an array
  ld   a,ILI_REG_DISOFF  ; dpy off
  out  (TFT_C),a

  ld   a,ILI_REG_SLPOUT   ; wake up
  out  (TFT_C),a

  ld   a,ILI_REG_WRCTRLD   ; CTRL display
  out  (TFT_C),a ; 
  ld   a,0b00100100
  out  (TFT_D),a

  ld   a,ILI_REG_WRDISBV   ; write brightness
  out  (TFT_C),a ; 
  ld   a,0xff
  out  (TFT_D),a
   
  ld   a,ILI_REG_MADCTL     ; set address mode
  out  (TFT_C),a
  ;ld   a,0b00100000
  ld   a,ILI_MASK_MADCTL_MY | ILI_MASK_MADCTL_ML
  out   (TFT_D),a

  ld   a,ILI_REG_COLMOD
  out  (TFT_C),a ; set pixel format
  ld   a,0b00000101
  out  (TFT_D),a

  ld   a,ILI_REG_NORON
  out  (TFT_D),a

  ld   b,0xff
delay2:
  djnz  delay2

  ld   a,ILI_REG_DISON  ; dpy on
  out  (TFT_C),a

  pop  bc
  ret


  section .rodata
allletters:
allletters_08x16:
    db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; '\x0'
    db 0x00,0x00,0x7e,0x81,0xa5,0x81,0x81,0xa5,0x99,0x81,0x81,0x7e,0x00,0x00,0x00,0x00 ; '\x1'
    db 0x00,0x00,0x7e,0xff,0xdb,0xff,0xff,0xdb,0xe7,0xff,0xff,0x7e,0x00,0x00,0x00,0x00 ; '\x2'
    db 0x00,0x00,0x00,0x00,0x6c,0xfe,0xfe,0xfe,0xfe,0x7c,0x38,0x10,0x00,0x00,0x00,0x00 ; '\x3'
    db 0x00,0x00,0x00,0x00,0x10,0x38,0x7c,0xfe,0x7c,0x38,0x10,0x00,0x00,0x00,0x00,0x00 ; '\x4'
    db 0x00,0x00,0x00,0x18,0x3c,0x3c,0xe7,0xe7,0xe7,0x18,0x18,0x3c,0x00,0x00,0x00,0x00 ; '\x5'
    db 0x00,0x00,0x00,0x18,0x3c,0x7e,0xff,0xff,0x7e,0x18,0x18,0x3c,0x00,0x00,0x00,0x00 ; '\x6'
    db 0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x3c,0x3c,0x18,0x00,0x00,0x00,0x00,0x00,0x00 ; '\x7'
    db 0xff,0xff,0xff,0xff,0xff,0xff,0xe7,0xc3,0xc3,0xe7,0xff,0xff,0xff,0xff,0xff,0xff ; '\x8'
    db 0x00,0x00,0x00,0x00,0x00,0x3c,0x42,0x42,0x42,0x42,0x3c,0x00,0x00,0x00,0x00,0x00 ; '\x9'
    db 0x00,0x00,0x00,0x00,0x00,0x3c,0x7e,0x7e,0x7e,0x7e,0x3c,0x00,0x00,0x00,0x00,0x00 ; '\x10'
    db 0x00,0x00,0x1e,0x0e,0x1a,0x32,0x78,0xcc,0xcc,0xcc,0xcc,0x78,0x00,0x00,0x00,0x00 ; '\x11'
    db 0x00,0x00,0x3c,0x66,0x66,0x66,0x66,0x3c,0x18,0x7e,0x18,0x18,0x00,0x00,0x00,0x00 ; '\x12'
    db 0x00,0x00,0x3f,0x33,0x3f,0x30,0x30,0x30,0x30,0x70,0xf0,0xe0,0x00,0x00,0x00,0x00 ; '\x13'
    db 0x00,0x00,0x7f,0x63,0x7f,0x63,0x63,0x63,0x63,0x67,0xe7,0xe6,0xc0,0x00,0x00,0x00 ; '\x14'
    db 0x00,0x00,0x00,0x10,0x92,0x54,0x38,0xee,0x38,0x54,0x92,0x10,0x00,0x00,0x00,0x00 ; '\x15'
    db 0x00,0x80,0xc0,0xe0,0xf0,0xf8,0xfc,0xf8,0xf0,0xe0,0xc0,0x80,0x00,0x00,0x00,0x00 ; '\x16'
    db 0x00,0x02,0x06,0x0e,0x1e,0x3e,0x7e,0x3e,0x1e,0x0e,0x06,0x02,0x00,0x00,0x00,0x00 ; '\x17'
    db 0x00,0x00,0x18,0x3c,0x7e,0x18,0x18,0x18,0x7e,0x3c,0x18,0x00,0x00,0x00,0x00,0x00 ; '\x18'
    db 0x00,0x00,0x66,0x66,0x66,0x66,0x66,0x66,0x66,0x00,0x66,0x66,0x00,0x00,0x00,0x00 ; '\x19'
    db 0x00,0x00,0x7f,0xdb,0xdb,0xdb,0x7b,0x1b,0x1b,0x1b,0x1b,0x1b,0x00,0x00,0x00,0x00 ; '\x20'
    db 0x00,0x7c,0xc6,0x60,0x38,0x6c,0xc6,0xc6,0x6c,0x38,0x0c,0xc6,0x7c,0x00,0x00,0x00 ; '\x21'
    db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xfe,0xfe,0xfe,0x00,0x00,0x00,0x00 ; '\x22'
    db 0x00,0x00,0x18,0x3c,0x7e,0x18,0x18,0x18,0x7e,0x3c,0x18,0x7e,0x00,0x00,0x00,0x00 ; '\x23'
    db 0x00,0x10,0x38,0x7c,0xfe,0x38,0x38,0x38,0x38,0x38,0x38,0x38,0x00,0x00,0x00,0x00 ; '\x24'
    db 0x00,0x38,0x38,0x38,0x38,0x38,0x38,0x38,0xfe,0x7c,0x38,0x10,0x00,0x00,0x00,0x00 ; '\x25'
    db 0x00,0x00,0x00,0x00,0x08,0x0c,0xfe,0xff,0xfe,0x0c,0x08,0x00,0x00,0x00,0x00,0x00 ; '\x26'
    db 0x00,0x00,0x00,0x00,0x10,0x30,0x7f,0xff,0x7f,0x30,0x10,0x00,0x00,0x00,0x00,0x00 ; '\x27'
    db 0x00,0x00,0x00,0x00,0x00,0x00,0xc0,0xc0,0xc0,0xfe,0x00,0x00,0x00,0x00,0x00,0x00 ; '\x28'
    db 0x00,0x00,0x00,0x00,0x00,0x28,0x6c,0xfe,0x6c,0x28,0x00,0x00,0x00,0x00,0x00,0x00 ; '\x29'
    db 0x00,0x00,0x00,0x00,0x10,0x38,0x38,0x7c,0x7c,0xfe,0xfe,0x00,0x00,0x00,0x00,0x00 ; '\x30'
    db 0x00,0x00,0x00,0x00,0xfe,0xfe,0x7c,0x7c,0x38,0x38,0x10,0x00,0x00,0x00,0x00,0x00 ; '\x31'
    db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; ' '
    db 0x00,0x00,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x00,0x18,0x18,0x00,0x00,0x00,0x00 ; '!'
    db 0x00,0x66,0x66,0x66,0x66,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; '"'
    db 0x00,0x00,0x00,0x6c,0x6c,0xfe,0x6c,0x6c,0x6c,0xfe,0x6c,0x6c,0x00,0x00,0x00,0x00 ; '#'
    db 0x10,0x10,0x7c,0xd6,0xd2,0xd0,0x7c,0x16,0x16,0x96,0xd6,0x7c,0x10,0x10,0x00,0x00 ; '$'
    db 0x00,0x00,0x00,0x00,0xc2,0xc6,0x0c,0x18,0x30,0x60,0xc6,0x86,0x00,0x00,0x00,0x00 ; '%'
    db 0x00,0x00,0x38,0x6c,0x6c,0x38,0x76,0xdc,0xcc,0xcc,0xcc,0x76,0x00,0x00,0x00,0x00 ; '&'
    db 0x00,0x30,0x30,0x30,0x60,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; '''
    db 0x00,0x00,0x0c,0x18,0x30,0x30,0x30,0x30,0x30,0x30,0x18,0x0c,0x00,0x00,0x00,0x00 ; '('
    db 0x00,0x00,0x30,0x18,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x18,0x30,0x00,0x00,0x00,0x00 ; ')'
    db 0x00,0x00,0x00,0x00,0x00,0x66,0x3c,0xff,0x3c,0x66,0x00,0x00,0x00,0x00,0x00,0x00 ; '*'
    db 0x00,0x00,0x00,0x00,0x00,0x18,0x18,0x7e,0x18,0x18,0x00,0x00,0x00,0x00,0x00,0x00 ; '+'
    db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x18,0x18,0x30,0x00,0x00,0x00 ; ','
    db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7e,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; '-'
    db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x18,0x00,0x00,0x00,0x00 ; '.'
    db 0x00,0x00,0x00,0x00,0x02,0x06,0x0c,0x18,0x30,0x60,0xc0,0x80,0x00,0x00,0x00,0x00 ; '/'
    db 0x00,0x00,0x7c,0xc6,0xc6,0xc6,0xd6,0xd6,0xc6,0xc6,0xc6,0x7c,0x00,0x00,0x00,0x00 ; '0'
    db 0x00,0x00,0x0c,0x1c,0x3c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x00,0x00,0x00,0x00 ; '1'
    db 0x00,0x00,0x7c,0xc6,0x06,0x0c,0x18,0x30,0x60,0xc0,0xc0,0xfe,0x00,0x00,0x00,0x00 ; '2'
    db 0x00,0x00,0x7c,0xc6,0x06,0x06,0x3c,0x06,0x06,0x06,0xc6,0x7c,0x00,0x00,0x00,0x00 ; '3'
    db 0x00,0x00,0x0e,0x1e,0x36,0x66,0xc6,0xfe,0x06,0x06,0x06,0x06,0x00,0x00,0x00,0x00 ; '4'
    db 0x00,0x00,0xfe,0xc0,0xc0,0xc0,0xfc,0x06,0x06,0x06,0xc6,0x7c,0x00,0x00,0x00,0x00 ; '5'
    db 0x00,0x00,0x38,0x60,0xc0,0xc0,0xfc,0xc6,0xc6,0xc6,0xc6,0x7c,0x00,0x00,0x00,0x00 ; '6'
    db 0x00,0x00,0xfe,0x06,0x06,0x06,0x0c,0x18,0x18,0x18,0x18,0x18,0x00,0x00,0x00,0x00 ; '7'
    db 0x00,0x00,0x7c,0xc6,0xc6,0xc6,0x7c,0xc6,0xc6,0xc6,0xc6,0x7c,0x00,0x00,0x00,0x00 ; '8'
    db 0x00,0x00,0x7c,0xc6,0xc6,0xc6,0x7e,0x06,0x06,0x06,0x0c,0x78,0x00,0x00,0x00,0x00 ; '9'
    db 0x00,0x00,0x00,0x00,0x18,0x18,0x00,0x00,0x00,0x18,0x18,0x00,0x00,0x00,0x00,0x00 ; ':'
    db 0x00,0x00,0x00,0x00,0x18,0x18,0x00,0x00,0x00,0x18,0x18,0x30,0x00,0x00,0x00,0x00 ; ';'
    db 0x00,0x00,0x00,0x06,0x0c,0x18,0x30,0x60,0x30,0x18,0x0c,0x06,0x00,0x00,0x00,0x00 ; '<'
    db 0x00,0x00,0x00,0x00,0x00,0x7e,0x00,0x00,0x7e,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; '='
    db 0x00,0x00,0x00,0x60,0x30,0x18,0x0c,0x06,0x0c,0x18,0x30,0x60,0x00,0x00,0x00,0x00 ; '>'
    db 0x00,0x00,0x7c,0xc6,0xc6,0x0c,0x18,0x18,0x18,0x00,0x18,0x18,0x00,0x00,0x00,0x00 ; '?'
    db 0x00,0x00,0x00,0x7c,0xc6,0xc6,0xde,0xde,0xde,0xdc,0xc0,0x7c,0x00,0x00,0x00,0x00 ; '@'
    db 0x00,0x00,0x7c,0xc6,0xc6,0xc6,0xc6,0xfe,0xc6,0xc6,0xc6,0xc6,0x00,0x00,0x00,0x00 ; 'A'
    db 0x00,0x00,0xfc,0xc6,0xc6,0xc6,0xfc,0xc6,0xc6,0xc6,0xc6,0xfc,0x00,0x00,0x00,0x00 ; 'B'
    db 0x00,0x00,0x7c,0xc6,0xc0,0xc0,0xc0,0xc0,0xc0,0xc0,0xc6,0x7c,0x00,0x00,0x00,0x00 ; 'C'
    db 0x00,0x00,0xf8,0xcc,0xc6,0xc6,0xc6,0xc6,0xc6,0xc6,0xcc,0xf8,0x00,0x00,0x00,0x00 ; 'D'
    db 0x00,0x00,0xfe,0xc0,0xc0,0xc0,0xf8,0xc0,0xc0,0xc0,0xc0,0xfe,0x00,0x00,0x00,0x00 ; 'E'
    db 0x00,0x00,0xfe,0xc0,0xc0,0xc0,0xf8,0xc0,0xc0,0xc0,0xc0,0xc0,0x00,0x00,0x00,0x00 ; 'F'
    db 0x00,0x00,0x7c,0xc6,0xc0,0xc0,0xc0,0xde,0xc6,0xc6,0xc6,0x7a,0x00,0x00,0x00,0x00 ; 'G'
    db 0x00,0x00,0xc6,0xc6,0xc6,0xc6,0xfe,0xc6,0xc6,0xc6,0xc6,0xc6,0x00,0x00,0x00,0x00 ; 'H'
    db 0x00,0x00,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x00,0x00,0x00,0x00 ; 'I'
    db 0x00,0x00,0x06,0x06,0x06,0x06,0x06,0x06,0xc6,0xc6,0xc6,0x7c,0x00,0x00,0x00,0x00 ; 'J'
    db 0x00,0x00,0xc6,0xc6,0xcc,0xd8,0xf0,0xf0,0xd8,0xcc,0xc6,0xc6,0x00,0x00,0x00,0x00 ; 'K'
    db 0x00,0x00,0xc0,0xc0,0xc0,0xc0,0xc0,0xc0,0xc0,0xc0,0xc0,0xfe,0x00,0x00,0x00,0x00 ; 'L'
    db 0x00,0x00,0xc6,0xee,0xfe,0xfe,0xd6,0xc6,0xc6,0xc6,0xc6,0xc6,0x00,0x00,0x00,0x00 ; 'M'
    db 0x00,0x00,0xc6,0xe6,0xf6,0xfe,0xde,0xce,0xc6,0xc6,0xc6,0xc6,0x00,0x00,0x00,0x00 ; 'N'
    db 0x00,0x00,0x7c,0xc6,0xc6,0xc6,0xc6,0xc6,0xc6,0xc6,0xc6,0x7c,0x00,0x00,0x00,0x00 ; 'O'
    db 0x00,0x00,0xfc,0xc6,0xc6,0xc6,0xc6,0xfc,0xc0,0xc0,0xc0,0xc0,0x00,0x00,0x00,0x00 ; 'P'
    db 0x00,0x00,0x7c,0xc6,0xc6,0xc6,0xc6,0xc6,0xc6,0xc6,0xc6,0x7c,0x0c,0x06,0x00,0x00 ; 'Q'
    db 0x00,0x00,0xfc,0xc6,0xc6,0xc6,0xfc,0xd8,0xcc,0xc6,0xc6,0xc6,0x00,0x00,0x00,0x00 ; 'R'
    db 0x00,0x00,0x7c,0xc6,0xc0,0xc0,0x7c,0x06,0x06,0x06,0xc6,0x7c,0x00,0x00,0x00,0x00 ; 'S'
    db 0x00,0x00,0xff,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x00,0x00,0x00,0x00 ; 'T'
    db 0x00,0x00,0xc6,0xc6,0xc6,0xc6,0xc6,0xc6,0xc6,0xc6,0xc6,0x7c,0x00,0x00,0x00,0x00 ; 'U'
    db 0x00,0x00,0xc6,0xc6,0xc6,0xc6,0xc6,0xc6,0xc6,0x6c,0x38,0x10,0x00,0x00,0x00,0x00 ; 'V'
    db 0x00,0x00,0xc6,0xc6,0xc6,0xc6,0xd6,0xd6,0xd6,0xfe,0xee,0xc6,0x00,0x00,0x00,0x00 ; 'W'
    db 0x00,0x00,0xc6,0xc6,0xc6,0x6c,0x38,0x38,0x6c,0xc6,0xc6,0xc6,0x00,0x00,0x00,0x00 ; 'X'
    db 0x00,0x00,0xc3,0xc3,0xc3,0x66,0x3c,0x18,0x18,0x18,0x18,0x18,0x00,0x00,0x00,0x00 ; 'Y'
    db 0x00,0x00,0xfe,0x06,0x06,0x0c,0x18,0x30,0x60,0xc0,0xc0,0xfe,0x00,0x00,0x00,0x00 ; 'Z'
    db 0x00,0x00,0x3c,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x30,0x3c,0x00,0x00,0x00,0x00 ; '['
    db 0x00,0x00,0x00,0x00,0x80,0xc0,0x60,0x30,0x18,0x0c,0x06,0x02,0x00,0x00,0x00,0x00 ; '\'
    db 0x00,0x00,0x3c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x0c,0x3c,0x00,0x00,0x00,0x00 ; ']'
    db 0x10,0x38,0x6c,0xc6,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; '^'
    db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0x00,0x00 ; '_'
    db 0x30,0x30,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; '`'
    db 0x00,0x00,0x00,0x00,0x00,0x7c,0x06,0x7e,0xc6,0xc6,0xc6,0x7e,0x00,0x00,0x00,0x00 ; 'a'
    db 0x00,0x00,0xc0,0xc0,0xc0,0xfc,0xc6,0xc6,0xc6,0xc6,0xc6,0xfc,0x00,0x00,0x00,0x00 ; 'b'
    db 0x00,0x00,0x00,0x00,0x00,0x7c,0xc6,0xc0,0xc0,0xc0,0xc6,0x7c,0x00,0x00,0x00,0x00 ; 'c'
    db 0x00,0x00,0x06,0x06,0x06,0x7e,0xc6,0xc6,0xc6,0xc6,0xc6,0x7e,0x00,0x00,0x00,0x00 ; 'd'
    db 0x00,0x00,0x00,0x00,0x00,0x7c,0xc6,0xc6,0xfe,0xc0,0xc0,0x7c,0x00,0x00,0x00,0x00 ; 'e'
    db 0x00,0x00,0x3c,0x60,0x60,0x60,0xf0,0x60,0x60,0x60,0x60,0x60,0x00,0x00,0x00,0x00 ; 'f'
    db 0x00,0x00,0x00,0x00,0x00,0x7e,0xc6,0xc6,0xc6,0xc6,0xc6,0x7e,0x06,0x06,0x7c,0x00 ; 'g'
    db 0x00,0x00,0xc0,0xc0,0xc0,0xfc,0xc6,0xc6,0xc6,0xc6,0xc6,0xc6,0x00,0x00,0x00,0x00 ; 'h'
    db 0x00,0x00,0x18,0x18,0x00,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x00,0x00,0x00,0x00 ; 'i'
    db 0x00,0x00,0x06,0x06,0x00,0x06,0x06,0x06,0x06,0x06,0x06,0x06,0xc6,0xc6,0x7c,0x00 ; 'j'
    db 0x00,0x00,0xc0,0xc0,0xc0,0xc6,0xcc,0xf8,0xf0,0xd8,0xcc,0xc6,0x00,0x00,0x00,0x00 ; 'k'
    db 0x00,0x00,0x38,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x00,0x00,0x00,0x00 ; 'l'
    db 0x00,0x00,0x00,0x00,0x00,0xfc,0xfe,0xd6,0xd6,0xd6,0xd6,0xd6,0x00,0x00,0x00,0x00 ; 'm'
    db 0x00,0x00,0x00,0x00,0x00,0xfc,0xc6,0xc6,0xc6,0xc6,0xc6,0xc6,0x00,0x00,0x00,0x00 ; 'n'
    db 0x00,0x00,0x00,0x00,0x00,0x7c,0xc6,0xc6,0xc6,0xc6,0xc6,0x7c,0x00,0x00,0x00,0x00 ; 'o'
    db 0x00,0x00,0x00,0x00,0x00,0xfc,0xc6,0xc6,0xc6,0xc6,0xc6,0xfc,0xc0,0xc0,0xc0,0x00 ; 'p'
    db 0x00,0x00,0x00,0x00,0x00,0x7e,0xc6,0xc6,0xc6,0xc6,0xc6,0x7e,0x06,0x06,0x06,0x00 ; 'q'
    db 0x00,0x00,0x00,0x00,0x00,0xfc,0xc6,0xc6,0xc0,0xc0,0xc0,0xc0,0x00,0x00,0x00,0x00 ; 'r'
    db 0x00,0x00,0x00,0x00,0x00,0x7c,0xc6,0xc0,0x7c,0x06,0xc6,0x7c,0x00,0x00,0x00,0x00 ; 's'
    db 0x00,0x00,0x08,0x18,0x18,0x7e,0x18,0x18,0x18,0x18,0x18,0x0e,0x00,0x00,0x00,0x00 ; 't'
    db 0x00,0x00,0x00,0x00,0x00,0xc6,0xc6,0xc6,0xc6,0xc6,0xc6,0x7e,0x00,0x00,0x00,0x00 ; 'u'
    db 0x00,0x00,0x00,0x00,0x00,0xc6,0xc6,0xc6,0xc6,0x6c,0x38,0x10,0x00,0x00,0x00,0x00 ; 'v'
    db 0x00,0x00,0x00,0x00,0x00,0xc6,0xc6,0xd6,0xd6,0xfe,0xee,0xc6,0x00,0x00,0x00,0x00 ; 'w'
    db 0x00,0x00,0x00,0x00,0x00,0xc6,0x6c,0x38,0x38,0x38,0x6c,0xc6,0x00,0x00,0x00,0x00 ; 'x'
    db 0x00,0x00,0x00,0x00,0x00,0xc6,0xc6,0xc6,0xc6,0xc6,0xc6,0x7e,0x06,0x06,0x7c,0x00 ; 'y'
    db 0x00,0x00,0x00,0x00,0x00,0xfe,0x0c,0x18,0x30,0x60,0xc0,0xfe,0x00,0x00,0x00,0x00 ; 'z'
    db 0x00,0x00,0x0e,0x18,0x18,0x30,0x60,0x30,0x18,0x18,0x18,0x0e,0x00,0x00,0x00,0x00 ; '{'
    db 0x00,0x00,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x00,0x00,0x00,0x00 ; '|'
    db 0x00,0x00,0x70,0x18,0x18,0x0c,0x06,0x0c,0x18,0x18,0x18,0x70,0x00,0x00,0x00,0x00 ; '}'
    db 0x00,0x00,0x76,0xdc,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; '~'
    db 0x00,0x00,0x00,0x00,0x10,0x38,0x6c,0xc6,0xc6,0xfe,0x00,0x00,0x00,0x00,0x00,0x00 ; '\x127'
    db 0x00,0x00,0x3c,0x66,0xc2,0xc0,0xc0,0xc0,0xc2,0x66,0x3c,0x0c,0x06,0x7c,0x00,0x00 ; '\x128'
    db 0x00,0x00,0xc6,0x00,0x00,0xc6,0xc6,0xc6,0xc6,0xc6,0xc6,0x7e,0x00,0x00,0x00,0x00 ; '\x129'
    db 0x00,0x0c,0x18,0x30,0x00,0x7c,0xc6,0xc6,0xfe,0xc0,0xc6,0x7c,0x00,0x00,0x00,0x00 ; '\x130'
    db 0x00,0x10,0x38,0x6c,0x00,0x7c,0x06,0x7e,0xc6,0xc6,0xc6,0x7e,0x00,0x00,0x00,0x00 ; '\x131'
    db 0x00,0x00,0xc6,0x00,0x00,0x7c,0x06,0x7e,0xc6,0xc6,0xc6,0x7e,0x00,0x00,0x00,0x00 ; '\x132'
    db 0x00,0x60,0x30,0x18,0x00,0x7c,0x06,0x7e,0xc6,0xc6,0xc6,0x7e,0x00,0x00,0x00,0x00 ; '\x133'
    db 0x00,0x38,0x6c,0x38,0x00,0x7c,0x06,0x7e,0xc6,0xc6,0xc6,0x7e,0x00,0x00,0x00,0x00 ; '\x134'
    db 0x00,0x00,0x00,0x00,0x3c,0x66,0x60,0x60,0x66,0x3c,0x0c,0x06,0x3c,0x00,0x00,0x00 ; '\x135'
    db 0x00,0x10,0x38,0x6c,0x00,0x7c,0xc6,0xc6,0xfe,0xc0,0xc6,0x7c,0x00,0x00,0x00,0x00 ; '\x136'
    db 0x00,0x00,0xc6,0x00,0x00,0x7c,0xc6,0xc6,0xfe,0xc0,0xc6,0x7c,0x00,0x00,0x00,0x00 ; '\x137'
    db 0x00,0x60,0x30,0x18,0x00,0x7c,0xc6,0xc6,0xfe,0xc0,0xc6,0x7c,0x00,0x00,0x00,0x00 ; '\x138'
    db 0x00,0x00,0x66,0x00,0x00,0x38,0x18,0x18,0x18,0x18,0x18,0x18,0x00,0x00,0x00,0x00 ; '\x139'
    db 0x00,0x18,0x3c,0x66,0x00,0x38,0x18,0x18,0x18,0x18,0x18,0x18,0x00,0x00,0x00,0x00 ; '\x140'
    db 0x00,0x60,0x30,0x18,0x00,0x38,0x18,0x18,0x18,0x18,0x18,0x18,0x00,0x00,0x00,0x00 ; '\x141'
    db 0x00,0xc6,0x00,0x7c,0xc6,0xc6,0xc6,0xc6,0xfe,0xc6,0xc6,0xc6,0x00,0x00,0x00,0x00 ; '\x142'
    db 0x38,0x6c,0x38,0x00,0x7c,0xc6,0xc6,0xc6,0xfe,0xc6,0xc6,0xc6,0x00,0x00,0x00,0x00 ; '\x143'
    db 0x18,0x30,0x60,0x00,0xfe,0x66,0x60,0x7c,0x60,0x60,0x66,0xfe,0x00,0x00,0x00,0x00 ; '\x144'
    db 0x00,0x00,0x00,0x00,0x6c,0xfe,0xb2,0x32,0x7e,0xd8,0xd8,0x6e,0x00,0x00,0x00,0x00 ; '\x145'
    db 0x00,0x00,0x3f,0x6c,0xcc,0xcc,0xff,0xcc,0xcc,0xcc,0xcc,0xcf,0x00,0x00,0x00,0x00 ; '\x146'
    db 0x00,0x10,0x38,0x6c,0x00,0x7c,0xc6,0xc6,0xc6,0xc6,0xc6,0x7c,0x00,0x00,0x00,0x00 ; '\x147'
    db 0x00,0x00,0xc6,0x00,0x00,0x7c,0xc6,0xc6,0xc6,0xc6,0xc6,0x7c,0x00,0x00,0x00,0x00 ; '\x148'
    db 0x00,0x60,0x30,0x18,0x00,0x7c,0xc6,0xc6,0xc6,0xc6,0xc6,0x7c,0x00,0x00,0x00,0x00 ; '\x149'
    db 0x00,0x30,0x78,0xcc,0x00,0xc6,0xc6,0xc6,0xc6,0xc6,0xc6,0x7e,0x00,0x00,0x00,0x00 ; '\x150'
    db 0x00,0x60,0x30,0x18,0x00,0xc6,0xc6,0xc6,0xc6,0xc6,0xc6,0x7e,0x00,0x00,0x00,0x00 ; '\x151'
    db 0x00,0x00,0xc6,0x00,0x00,0xc6,0xc6,0xc6,0xc6,0xc6,0xc6,0x7e,0x06,0x0c,0x78,0x00 ; '\x152'
    db 0x00,0xc6,0x00,0x7c,0xc6,0xc6,0xc6,0xc6,0xc6,0xc6,0xc6,0x7c,0x00,0x00,0x00,0x00 ; '\x153'
    db 0x00,0xc6,0x00,0xc6,0xc6,0xc6,0xc6,0xc6,0xc6,0xc6,0xc6,0x7c,0x00,0x00,0x00,0x00 ; '\x154'
    db 0x00,0x18,0x18,0x3c,0x66,0x60,0x60,0x60,0x66,0x3c,0x18,0x18,0x00,0x00,0x00,0x00 ; '\x155'
    db 0x00,0x38,0x6c,0x64,0x60,0xf0,0x60,0x60,0x60,0x60,0xe6,0xfc,0x00,0x00,0x00,0x00 ; '\x156'
    db 0x00,0x00,0x66,0x66,0x3c,0x18,0x7e,0x18,0x7e,0x18,0x18,0x18,0x00,0x00,0x00,0x00 ; '\x157'
    db 0x00,0xf8,0xcc,0xcc,0xf8,0xc4,0xcc,0xde,0xcc,0xcc,0xcc,0xc6,0x00,0x00,0x00,0x00 ; '\x158'
    db 0x00,0x0e,0x1b,0x18,0x18,0x18,0x7e,0x18,0x18,0x18,0x18,0x18,0xd8,0x70,0x00,0x00 ; '\x159'
    db 0x00,0x18,0x30,0x60,0x00,0x7c,0x06,0x7e,0xc6,0xc6,0xc6,0x7e,0x00,0x00,0x00,0x00 ; ' '
    db 0x00,0x0c,0x18,0x30,0x00,0x38,0x18,0x18,0x18,0x18,0x18,0x18,0x00,0x00,0x00,0x00 ; '¡'
    db 0x00,0x18,0x30,0x60,0x00,0x7c,0xc6,0xc6,0xc6,0xc6,0xc6,0x7c,0x00,0x00,0x00,0x00 ; '¢'
    db 0x00,0x18,0x30,0x60,0x00,0xc6,0xc6,0xc6,0xc6,0xc6,0xc6,0x7e,0x00,0x00,0x00,0x00 ; '£'
    db 0x00,0x00,0x76,0xdc,0x00,0xfc,0xc6,0xc6,0xc6,0xc6,0xc6,0xc6,0x00,0x00,0x00,0x00 ; '¤'
    db 0x76,0xdc,0x00,0xc6,0xe6,0xf6,0xfe,0xde,0xce,0xc6,0xc6,0xc6,0x00,0x00,0x00,0x00 ; '¥'
    db 0x00,0x3c,0x6c,0x6c,0x3e,0x00,0x7e,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; '¦'
    db 0x00,0x38,0x6c,0x6c,0x38,0x00,0x7c,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; '§'
    db 0x00,0x00,0x30,0x30,0x00,0x30,0x30,0x60,0xc0,0xc6,0xc6,0x7c,0x00,0x00,0x00,0x00 ; '¨'
    db 0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0xc0,0xc0,0xc0,0xc0,0x00,0x00,0x00,0x00,0x00 ; '©'
    db 0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0x06,0x06,0x06,0x06,0x00,0x00,0x00,0x00,0x00 ; 'ª'
    db 0x00,0x18,0x38,0x18,0x18,0x3c,0x00,0xff,0x00,0x7c,0x06,0x3c,0x60,0x7e,0x00,0x00 ; '«'
    db 0x00,0x18,0x38,0x18,0x18,0x3c,0x00,0xff,0x00,0x1e,0x36,0x66,0xfe,0x06,0x00,0x00 ; '¬'
    db 0x00,0x00,0x18,0x18,0x00,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x00,0x00,0x00,0x00 ; '­'
    db 0x00,0x00,0x00,0x00,0x00,0x22,0x66,0xee,0x66,0x22,0x00,0x00,0x00,0x00,0x00,0x00 ; '®'
    db 0x00,0x00,0x00,0x00,0x00,0x88,0xcc,0xee,0xcc,0x88,0x00,0x00,0x00,0x00,0x00,0x00 ; '¯'
    db 0x11,0x44,0x11,0x44,0x11,0x44,0x11,0x44,0x11,0x44,0x11,0x44,0x11,0x44,0x11,0x44 ; '°'
    db 0x55,0xaa,0x55,0xaa,0x55,0xaa,0x55,0xaa,0x55,0xaa,0x55,0xaa,0x55,0xaa,0x55,0xaa ; '±'
    db 0xdd,0x77,0xdd,0x77,0xdd,0x77,0xdd,0x77,0xdd,0x77,0xdd,0x77,0xdd,0x77,0xdd,0x77 ; '²'
    db 0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18 ; '³'
    db 0x18,0x18,0x18,0x18,0x18,0x18,0x18,0xf8,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18 ; '´'
    db 0x18,0x18,0x18,0x18,0x18,0xf8,0x18,0xf8,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18 ; 'µ'
    db 0x36,0x36,0x36,0x36,0x36,0x36,0x36,0xf6,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36 ; '¶'
    db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36 ; '·'
    db 0x00,0x00,0x00,0x00,0x00,0xf8,0x18,0xf8,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18 ; '¸'
    db 0x36,0x36,0x36,0x36,0x36,0xf6,0x06,0xf6,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36 ; '¹'
    db 0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36 ; 'º'
    db 0x00,0x00,0x00,0x00,0x00,0xfe,0x06,0xf6,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36 ; '»'
    db 0x36,0x36,0x36,0x36,0x36,0xf6,0x06,0xfe,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; '¼'
    db 0x36,0x36,0x36,0x36,0x36,0x36,0x36,0xfe,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; '½'
    db 0x18,0x18,0x18,0x18,0x18,0xf8,0x18,0xf8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; '¾'
    db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xf8,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18 ; '¿'
    db 0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x1f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; 'À'
    db 0x18,0x18,0x18,0x18,0x18,0x18,0x18,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; 'Á'
    db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18 ; 'Â'
    db 0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x1f,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18 ; 'Ã'
    db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; 'Ä'
    db 0x18,0x18,0x18,0x18,0x18,0x18,0x18,0xff,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18 ; 'Å'
    db 0x18,0x18,0x18,0x18,0x18,0x1f,0x18,0x1f,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18 ; 'Æ'
    db 0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x37,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36 ; 'Ç'
    db 0x36,0x36,0x36,0x36,0x36,0x37,0x30,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; 'È'
    db 0x00,0x00,0x00,0x00,0x00,0x3f,0x30,0x37,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36 ; 'É'
    db 0x36,0x36,0x36,0x36,0x36,0xf7,0x00,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; 'Ê'
    db 0x00,0x00,0x00,0x00,0x00,0xff,0x00,0xf7,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36 ; 'Ë'
    db 0x36,0x36,0x36,0x36,0x36,0x37,0x30,0x37,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36 ; 'Ì'
    db 0x00,0x00,0x00,0x00,0x00,0xff,0x00,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; 'Í'
    db 0x36,0x36,0x36,0x36,0x36,0xf7,0x00,0xf7,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36 ; 'Î'
    db 0x18,0x18,0x18,0x18,0x18,0xff,0x00,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; 'Ï'
    db 0x36,0x36,0x36,0x36,0x36,0x36,0x36,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; 'Ð'
    db 0x00,0x00,0x00,0x00,0x00,0xff,0x00,0xff,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18 ; 'Ñ'
    db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36 ; 'Ò'
    db 0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x3f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; 'Ó'
    db 0x18,0x18,0x18,0x18,0x18,0x1f,0x18,0x1f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; 'Ô'
    db 0x00,0x00,0x00,0x00,0x00,0x1f,0x18,0x1f,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18 ; 'Õ'
    db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3f,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36 ; 'Ö'
    db 0x36,0x36,0x36,0x36,0x36,0x36,0x36,0xff,0x36,0x36,0x36,0x36,0x36,0x36,0x36,0x36 ; '×'
    db 0x18,0x18,0x18,0x18,0x18,0xff,0x18,0xff,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18 ; 'Ø'
    db 0x18,0x18,0x18,0x18,0x18,0x18,0x18,0xf8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; 'Ù'
    db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1f,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18 ; 'Ú'
    db 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff ; 'Û'
    db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff ; 'Ü'
    db 0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0,0xf0 ; 'Ý'
    db 0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f,0x0f ; 'Þ'
    db 0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; 'ß'
    db 0x00,0x00,0x00,0x00,0x00,0x76,0xdc,0xd8,0xd8,0xd8,0xdc,0x76,0x00,0x00,0x00,0x00 ; 'à'
    db 0x00,0x00,0x78,0xcc,0xcc,0xcc,0xd8,0xcc,0xc6,0xc6,0xc6,0xcc,0xc0,0xc0,0x00,0x00 ; 'á'
    db 0x00,0x00,0xfe,0xc6,0xc6,0xc0,0xc0,0xc0,0xc0,0xc0,0xc0,0xc0,0x00,0x00,0x00,0x00 ; 'â'
    db 0x00,0x00,0x00,0x00,0xfe,0x6c,0x6c,0x6c,0x6c,0x6c,0x6c,0x6c,0x00,0x00,0x00,0x00 ; 'ã'
    db 0x00,0x00,0x00,0xfe,0xc6,0x60,0x30,0x18,0x30,0x60,0xc6,0xfe,0x00,0x00,0x00,0x00 ; 'ä'
    db 0x00,0x00,0x00,0x00,0x00,0x7e,0xd8,0xd8,0xd8,0xd8,0xd8,0x70,0x00,0x00,0x00,0x00 ; 'å'
    db 0x00,0x00,0x00,0x00,0x66,0x66,0x66,0x66,0x66,0x7c,0x60,0x60,0xc0,0x00,0x00,0x00 ; 'æ'
    db 0x00,0x00,0x00,0x00,0x76,0xdc,0x18,0x18,0x18,0x18,0x18,0x18,0x00,0x00,0x00,0x00 ; 'ç'
    db 0x00,0x00,0x00,0x7e,0x18,0x3c,0x66,0x66,0x66,0x3c,0x18,0x7e,0x00,0x00,0x00,0x00 ; 'è'
    db 0x00,0x00,0x00,0x38,0x6c,0xc6,0xc6,0xfe,0xc6,0xc6,0x6c,0x38,0x00,0x00,0x00,0x00 ; 'é'
    db 0x00,0x00,0x38,0x6c,0xc6,0xc6,0xc6,0x6c,0x6c,0x6c,0x6c,0xee,0x00,0x00,0x00,0x00 ; 'ê'
    db 0x00,0x00,0x1e,0x30,0x18,0x0c,0x3e,0x66,0x66,0x66,0x66,0x3c,0x00,0x00,0x00,0x00 ; 'ë'
    db 0x00,0x00,0x00,0x00,0x00,0x7e,0xdb,0xdb,0xdb,0x7e,0x00,0x00,0x00,0x00,0x00,0x00 ; 'ì'
    db 0x00,0x00,0x00,0x03,0x06,0x7e,0xdb,0xdb,0xf3,0x7e,0x60,0xc0,0x00,0x00,0x00,0x00 ; 'í'
    db 0x00,0x00,0x00,0x00,0x3c,0x60,0x60,0x7c,0x60,0x60,0x3c,0x00,0x00,0x00,0x00,0x00 ; 'î'
    db 0x00,0x00,0x00,0x7c,0xc6,0xc6,0xc6,0xc6,0xc6,0xc6,0xc6,0xc6,0x00,0x00,0x00,0x00 ; 'ï'
    db 0x00,0x00,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0xff,0x00,0x00,0x00,0x00,0x00 ; 'ð'
    db 0x00,0x00,0x00,0x00,0x18,0x18,0x7e,0x18,0x18,0x00,0x00,0xff,0x00,0x00,0x00,0x00 ; 'ñ'
    db 0x00,0x00,0x00,0x30,0x18,0x0c,0x06,0x0c,0x18,0x30,0x00,0x7e,0x00,0x00,0x00,0x00 ; 'ò'
    db 0x00,0x00,0x00,0x0c,0x18,0x30,0x60,0x30,0x18,0x0c,0x00,0x7e,0x00,0x00,0x00,0x00 ; 'ó'
    db 0x00,0x00,0x0e,0x1b,0x1b,0x1b,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18 ; 'ô'
    db 0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18,0xd8,0xd8,0xd8,0x70,0x00,0x00,0x00,0x00 ; 'õ'
    db 0x00,0x00,0x00,0x00,0x18,0x18,0x00,0x7e,0x00,0x18,0x18,0x00,0x00,0x00,0x00,0x00 ; 'ö'
    db 0x00,0x00,0x00,0x00,0x00,0x76,0xdc,0x00,0x76,0xdc,0x00,0x00,0x00,0x00,0x00,0x00 ; '÷'
    db 0x00,0x38,0x6c,0x6c,0x38,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; 'ø'
    db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; 'ù'
    db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; 'ú'
    db 0x00,0x0f,0x0c,0x0c,0x0c,0x0c,0x0c,0xec,0x6c,0x6c,0x3c,0x1c,0x00,0x00,0x00,0x00 ; 'û'
    db 0x00,0xd8,0x6c,0x6c,0x6c,0x6c,0x6c,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; 'ü'
    db 0x00,0x70,0xd8,0x30,0x60,0xc8,0xf8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; 'ý'
    db 0x00,0x00,0x00,0x00,0x7e,0x7e,0x7e,0x7e,0x7e,0x7e,0x7e,0x00,0x00,0x00,0x00,0x00 ; 'þ'
    db 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 ; 'ÿ'
